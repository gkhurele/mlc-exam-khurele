pipeline {
    agent any
    
    environment {
        // .NET CLI —Ç–µ–ª–µ–º–µ—Ç—Ä–∏ –∏–¥—ç–≤—Ö–≥“Ø–π–∂“Ø“Ø–ª—ç—Ö
        DOTNET_CLI_TELEMETRY_OPTOUT = 'true'
        DOTNET_NOLOGO = 'true'
        // NuGet –ø–∞–∫–µ—Ç –∫—ç—à workspace –¥–æ—Ç–æ—Ä —Ö–∞–¥–≥–∞–ª–∞—Ö
        NUGET_PACKAGES = "${WORKSPACE}/.nuget/packages"
        // .NET PATH-–¥ –Ω—ç–º—ç—Ö
        PATH = "${PATH}:/root/.dotnet"
    }
    
    stages {
        stage('Prerequisites Check') {
            steps {
                echo 'üîç –®–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π –∑“Ø–π–ª—Å–∏–π–≥ —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...'
                script {
                    try {
                        sh 'dotnet --version'
                        echo '‚úÖ .NET SDK –∞–º–∂–∏–ª—Ç—Ç–∞–π –æ–ª–¥–ª–æ–æ'
                    } catch (Exception e) {
                        error "‚ùå .NET SDK –æ–ª–¥—Å–æ–Ω–≥“Ø–π: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Checkout') {
            steps {
                echo 'üì• Git repository-–æ–æ—Å –∫–æ–¥ —Ç–∞—Ç–∞–∂ –±–∞–π–Ω–∞...'
                git branch: 'feature-ci-pipeline',
                    url: 'https://github.com/gkhurele/mlc-exam-khurele',
                    credentialsId: 'jenkins-ci-token'
                
                echo '‚úÖ Checkout –∞–º–∂–∏–ª—Ç—Ç–∞–π'
                // –§–∞–π–ª—ã–Ω –∂–∞–≥—Å–∞–∞–ª—Ç —Ö–∞—Ä–∞—Ö
                sh 'ls -la'
            }
        }
        
        stage('Restore') {
            steps {
                echo 'üì¶ NuGet –ø–∞–∫–µ—Ç—É—É–¥—ã–≥ restore —Ö–∏–π–∂ –±–∞–π–Ω–∞...'
                script {
                    try {
                        sh 'dotnet restore --verbosity normal'
                        echo '‚úÖ Restore –∞–º–∂–∏–ª—Ç—Ç–∞–π'
                    } catch (Exception e) {
                        error "‚ùå Restore –∞–ª–¥–∞–∞: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Build') {
            steps {
                echo 'üî® Project-–∏–π–≥ build —Ö–∏–π–∂ –±–∞–π–Ω–∞...'
                script {
                    try {
                        sh 'dotnet build --configuration Release --no-restore --verbosity normal'
                        echo '‚úÖ Build –∞–º–∂–∏–ª—Ç—Ç–∞–π'
                    } catch (Exception e) {
                        error "‚ùå Build –∞–ª–¥–∞–∞: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                echo 'üß™ –¢–µ—Å—Ç“Ø“Ø–¥ –∞–∂–∏–ª–ª—É—É–ª–∂ –±–∞–π–Ω–∞...'
                script {
                    try {
                        sh '''
                            dotnet test \
                                --configuration Release \
                                --no-build \
                                --verbosity normal \
                                --logger "trx;LogFileName=TestResults.trx" \
                                --results-directory ./TestResults \
                                --collect:"XPlat Code Coverage"
                        '''
                        echo '‚úÖ –ë“Ø—Ö —Ç–µ—Å—Ç“Ø“Ø–¥ –∞–º–∂–∏–ª—Ç—Ç–∞–π'
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è –ó–∞—Ä–∏–º —Ç–µ—Å—Ç“Ø“Ø–¥ –∞–ª–¥–∞–∞—Ç–∞–π: ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
            post {
                always {
                    script {
                        // Test “Ø—Ä –¥“Ø–Ω–≥ –∞—Ä—Ö–∏–≤–ª–∞—Ö
                        try {
                            sh 'ls -la TestResults/ || echo "TestResults —Ö–∞–≤—Ç–∞—Å –±–∞–π—Ö–≥“Ø–π"'
                            
                            if (sh(script: 'ls TestResults/*.trx 2>/dev/null', returnStatus: true) == 0) {
                                echo 'üìä Test “Ø—Ä –¥“Ø–Ω–≥ –∞—Ä—Ö–∏–≤–ª–∞–∂ –±–∞–π–Ω–∞...'
                                archiveArtifacts artifacts: 'TestResults/*.trx', 
                                               fingerprint: true, 
                                               allowEmptyArchive: true
                            } else {
                                echo 'üìä Test results –æ–ª–¥—Å–æ–Ω–≥“Ø–π'
                            }
                            
                            // Coverage report –±–∞–π–≥–∞–∞ –±–æ–ª –∞—Ä—Ö–∏–≤–ª–∞—Ö
                            if (sh(script: 'find TestResults -name "coverage.cobertura.xml" 2>/dev/null', returnStatus: true) == 0) {
                                echo 'üìà Coverage report –∞—Ä—Ö–∏–≤–ª–∞–∂ –±–∞–π–Ω–∞...'
                                archiveArtifacts artifacts: 'TestResults/**/coverage.cobertura.xml', 
                                               fingerprint: true, 
                                               allowEmptyArchive: true
                            } else {
                                echo 'üìà Coverage report –æ–ª–¥—Å–æ–Ω–≥“Ø–π'
                            }
                        } catch (Exception e) {
                            echo "–ê—Ä—Ö–∏–≤ –∞–ª–¥–∞–∞: ${e.getMessage()}"
                        }
                    }
                }
            }
        }
        
        stage('Package') {
            when {
                expression { 
                    return currentBuild.result == null || currentBuild.result == 'SUCCESS' 
                }
            }
            steps {
                echo 'üì¶ Application package —Ö–∏–π–∂ –±–∞–π–Ω–∞...'
                script {  
                    try {
                        sh '''
                            dotnet publish \
                                --configuration Release \
                                --no-build \
                                --output ./publish \
                                --verbosity normal
                        '''
                        
                        // Publish —Ö–∞–≤—Ç–∞—Å–Ω—ã –∞–≥—É—É–ª–≥—ã–≥ —Ö–∞—Ä–∞—Ö
                        sh 'ls -la ./publish'
                        
                        echo '‚úÖ Package –∞–º–∂–∏–ª—Ç—Ç–∞–π'
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Package –∞–ª–¥–∞–∞: ${e.getMessage()}"
                    }
                }
            }
            post {
                success {
                    // Build artifacts –∞—Ä—Ö–∏–≤–ª–∞—Ö
                    archiveArtifacts artifacts: 'publish/**', 
                                   fingerprint: true, 
                                   allowEmptyArchive: true
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Workspace —Ü—ç–≤—ç—Ä–ª—ç–∂ –±–∞–π–Ω–∞...'
            script {
                try {
                    // Temp —Ñ–∞–π–ª—É—É–¥—ã–≥ —É—Å—Ç–≥–∞—Ö
                    sh 'rm -rf ./publish || true'
                    sh 'rm -rf ./TestResults || true'
                    sh 'rm -rf ./.nuget || true'
                    
                    // Git clean
                    sh 'git clean -fdx || true'
                    
                    echo '‚úÖ Cleanup –∞–º–∂–∏–ª—Ç—Ç–∞–π'
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Cleanup –∞–ª–¥–∞–∞: ${e.getMessage()}"
                }
            }
        }
        
        success {
            echo '''
            üéâ ===================================
               PIPELINE –ê–ú–ñ–ò–õ–¢–¢–ê–ô –î–£–£–°–õ–ê–ê!
            ===================================
            ‚úÖ Code checkout: –ê–º–∂–∏–ª—Ç—Ç–∞–π
            ‚úÖ Package restore: –ê–º–∂–∏–ª—Ç—Ç–∞–π  
            ‚úÖ Build: –ê–º–∂–∏–ª—Ç—Ç–∞–π
            ‚úÖ Test: –ê–º–∂–∏–ª—Ç—Ç–∞–π
            ‚úÖ Package: –ê–º–∂–∏–ª—Ç—Ç–∞–π
            '''
        }
        
        failure {
            echo '''
            üí• ===================================
               PIPELINE –ê–õ–î–ê–ê–¢–ê–ô –î–£–£–°–õ–ê–ê!
            ===================================
            ‚ùå –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –¥—ç—ç—Ä—Ö –ª–æ–≥–æ–æ—Å “Ø–∑–Ω—ç “Ø“Ø.
            '''
        }
        
        unstable {
            echo '''
            ‚ö†Ô∏è ===================================
              PIPELINE –¢–û–ì–¢–í–û–†–ì“Æ–ô –¢”®–õ”®–í–¢–≠–ô!
            ===================================
            ‚úÖ Build: –ê–º–∂–∏–ª—Ç—Ç–∞–π
            ‚ö†Ô∏è Test: –ó–∞—Ä–∏–º —Ç–µ—Å—Ç“Ø“Ø–¥ –∞–ª–¥–∞–∞—Ç–∞–π
            üìä Test report-—ã–≥ —à–∞–ª–≥–∞–Ω–∞ —É—É.
            '''
        }
        
        changed {
            script {
                def status = currentBuild.result ?: 'SUCCESS'
                echo "üîÑ Pipeline —Ç”©–ª”©–≤ ”©–º–Ω”©—Ö build-—ç—ç—Å ”©”©—Ä—á–ª”©–≥–¥–ª”©”©: ${status}"
            }
        }
    }
}